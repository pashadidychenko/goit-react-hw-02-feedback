{"version":3,"sources":["components/Button.js","components/Title.js","components/Statistic.js","components/Total.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Button","variant","color","this","props","onClick","addFeedback","data","message","React","Component","Title","Statistic","good","neutral","bad","TotalCounter","goodFeedback","Math","round","defaultProps","Notification","App","state","el","setState","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"8RAGaA,EAAb,uKACY,IAAD,OACP,OACE,kBAAC,IAAD,CACEC,QAAQ,YACRC,MAAOC,KAAKC,MAAMF,MAClBG,QAAS,kBAAM,EAAKD,MAAME,YAAY,EAAKF,MAAMG,QAEhDJ,KAAKC,MAAMI,aARpB,GAA4BC,IAAMC,WCDrBC,EAAb,uKAEI,OAAO,8LAFX,GAA2BF,IAAMC,WCApBE,EAAb,uKAEI,OACE,kBAAC,WAAD,KACE,4FACA,+DAAYT,KAAKC,MAAMS,MACvB,6FAAiBV,KAAKC,MAAMU,SAC5B,qEAAaX,KAAKC,MAAMW,UAPhC,GAA+BL,aCClBM,EAAb,uKAEI,IAAIC,EAAeC,KAAKC,MACtBhB,KAAKC,MAAMS,MAAQV,KAAKC,MAAMS,KAAOV,KAAKC,MAAMW,IAAM,MAAS,KAEjE,OACE,kBAAC,WAAD,KACE,yLACgCZ,KAAKC,MAAMS,KAAOV,KAAKC,MAAMU,QAAUX,KAAKC,MAAMW,KAElF,2MAAqCE,EAArC,WAVR,GAAkCP,aAgBlCM,EAAaI,aAAe,CAC1BH,aAAc,GClBT,IAAMI,EAAb,uKAEI,OAAO,4BAAKlB,KAAKC,MAAMI,aAF3B,GAAkCC,IAAMC,W,QCsDzBY,E,4MA9CbC,MAAQ,CACNV,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPT,YAAc,SAAAkB,GACD,SAAPA,GACF,EAAKC,UAAS,SAAAF,GAAK,MAAK,CAAEV,KAAMU,EAAMV,KAAO,MAEpC,YAAPW,GACF,EAAKC,UAAS,SAAAF,GAAK,MAAK,CAAET,QAASS,EAAMT,QAAU,MAE1C,QAAPU,GACF,EAAKC,UAAS,SAAAF,GAAK,MAAK,CAAER,IAAKQ,EAAMR,IAAM,O,uDAIrC,IAAD,EACwBZ,KAAKoB,MAA5BV,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACvB,OACE,kBAACW,EAAA,EAAD,KACE,kBAAC,EAAD,MACA,6BACE,kBAAC,EAAD,CAAQnB,KAAK,OAAOC,QAAQ,iCAAQF,YAAaH,KAAKG,YAAaJ,MAAM,YACzE,kBAAC,EAAD,CACEK,KAAK,UACLC,QAAQ,+DACRF,YAAaH,KAAKG,YAClBJ,MAAM,YAER,kBAAC,EAAD,CAAQK,KAAK,MAAMC,QAAQ,uCAASF,YAAaH,KAAKG,YAAaJ,MAAM,eAE1EW,EAAO,GAAKC,EAAU,GAAKC,EAAM,EAChC,6BACE,kBAAC,EAAD,CAAWF,KAAMA,EAAMC,QAASA,EAASC,IAAKA,IAC9C,kBAAC,EAAD,CAAcF,KAAMA,EAAMC,QAASA,EAASC,IAAKA,KAGnD,kBAAC,EAAD,CAAcP,QAAQ,qG,GAxCdC,IAAMC,WCGJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMpC,c","file":"static/js/main.83e924b4.chunk.js","sourcesContent":["import React from 'react';\r\nimport MaterialButton from '@material-ui/core/Button';\r\n\r\nexport class Button extends React.Component {\r\n  render() {\r\n    return (\r\n      <MaterialButton\r\n        variant=\"contained\"\r\n        color={this.props.color}\r\n        onClick={() => this.props.addFeedback(this.props.data)}\r\n      >\r\n        {this.props.message}\r\n      </MaterialButton>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport class Title extends React.Component {\r\n  render() {\r\n    return <h1>Будь-ласка залиште Ваш відгук</h1>;\r\n  }\r\n}\r\n","import React, { Fragment, Component } from 'react';\r\n\r\nexport class Statistic extends Component {\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <h2>Статистика</h2>\r\n        <h3>Добре: {this.props.good}</h3>\r\n        <h3>Нейтрально: {this.props.neutral}</h3>\r\n        <h3>Погано: {this.props.bad}</h3>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n","import React, { Fragment, Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class TotalCounter extends Component {\r\n  render() {\r\n    let goodFeedback = Math.round(\r\n      this.props.good / (this.props.good + this.props.bad + 0.001) / 0.01,\r\n    );\r\n    return (\r\n      <Fragment>\r\n        <h3>\r\n          Загальна кількість відгуків: {this.props.good + this.props.neutral + this.props.bad}\r\n        </h3>\r\n        <h3>Статистика позитивних відгуків: {goodFeedback} %</h3>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nTotalCounter.defaultProps = {\r\n  goodFeedback: 0,\r\n};\r\n\r\nTotalCounter.propTypes = {\r\n  goodFeedback: PropTypes.number.isRequired,\r\n};\r\n","import React from 'react';\r\n\r\nexport class Notification extends React.Component {\r\n  render() {\r\n    return <h3>{this.props.message}</h3>;\r\n  }\r\n}\r\n","import React from 'react';\nimport { Button } from './components/Button.js';\nimport { Title } from './components/Title.js';\nimport { Statistic } from './components/Statistic.js';\nimport { TotalCounter } from './components/Total.js';\nimport { Notification } from './components/Notification.js';\nimport Container from '@material-ui/core/Container';\nimport PropTypes from 'prop-types';\n\nclass App extends React.Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  addFeedback = el => {\n    if (el === 'good') {\n      this.setState(state => ({ good: state.good + 1 }));\n    }\n    if (el === 'neutral') {\n      this.setState(state => ({ neutral: state.neutral + 1 }));\n    }\n    if (el === 'bad') {\n      this.setState(state => ({ bad: state.bad + 1 }));\n    }\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <Container>\n        <Title />\n        <div>\n          <Button data=\"good\" message=\"Добре\" addFeedback={this.addFeedback} color=\"primary\" />\n          <Button\n            data=\"neutral\"\n            message=\"Нейтрально\"\n            addFeedback={this.addFeedback}\n            color=\"default\"\n          />\n          <Button data=\"bad\" message=\"Погано\" addFeedback={this.addFeedback} color=\"secondary\" />\n        </div>\n        {good > 0 || neutral > 0 || bad > 0 ? (\n          <div>\n            <Statistic good={good} neutral={neutral} bad={bad} />\n            <TotalCounter good={good} neutral={neutral} bad={bad} />\n          </div>\n        ) : (\n          <Notification message=\"Відгуки відсутні\" />\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n\nApp.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  message: PropTypes.string,\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}