{"version":3,"sources":["components/Button.js","components/Statistic.js","components/Total.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Title","React","Component","ButtonGood","variant","color","onClick","this","props","onGood","ButtonNeutral","onNeutral","ButtonBad","onBad","Statistic","good","neutral","bad","TotalCounter","goodFeedback","Math","round","defaultProps","Notification","message","App","state","setState","neutralFeedback","badFeedback","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"8RAGaA,EAAb,uKAEI,OAAO,8LAFX,GAA2BC,IAAMC,WAMpBC,EAAb,uKAEI,OACE,kBAAC,IAAD,CAAgBC,QAAQ,YAAYC,MAAM,UAAUC,QAASC,KAAKC,MAAMC,QAAxE,sCAHN,GAAgCR,IAAMC,WAUzBQ,EAAb,uKAEI,OACE,kBAAC,IAAD,CAAgBN,QAAQ,YAAYE,QAASC,KAAKC,MAAMG,WAAxD,oEAHN,GAAmCV,IAAMC,WAU5BU,EAAb,uKAEI,OACE,kBAAC,IAAD,CAAgBR,QAAQ,YAAYC,MAAM,YAAYC,QAASC,KAAKC,MAAMK,OAA1E,4CAHN,GAA+BZ,IAAMC,WC3BxBY,EAAb,uKAEI,OACE,kBAAC,WAAD,KACE,4FACA,+DAAYP,KAAKC,MAAMO,MACvB,6FAAiBR,KAAKC,MAAMQ,SAC5B,qEAAaT,KAAKC,MAAMS,UAPhC,GAA+BhB,IAAMC,WCCxBgB,EAAb,uKAEI,IAAIC,EAAeC,KAAKC,MAAMd,KAAKC,MAAMO,MAAQR,KAAKC,MAAMO,KAAOR,KAAKC,MAAMS,KAAO,KACrF,OACE,kBAAC,WAAD,KACE,yLACgCV,KAAKC,MAAMO,KAAOR,KAAKC,MAAMQ,QAAUT,KAAKC,MAAMS,KAElF,2MAAqCE,EAArC,WARR,GAAkClB,IAAMC,WAcxCgB,EAAaI,aAAe,CAC1BH,aAAc,GChBT,IAAMI,EAAb,uKAEI,OAAO,4BAAKhB,KAAKC,MAAMgB,aAF3B,GAAkCvB,IAAMC,W,QCgDzBuB,E,4MAzCbC,MAAQ,CACNX,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPE,aAAe,WACb,EAAKQ,UAAS,SAAAD,GAAK,MAAK,CAAEX,KAAMW,EAAMX,KAAO,O,EAG/Ca,gBAAkB,WAChB,EAAKD,UAAS,SAAAD,GAAK,MAAK,CAAEV,QAASU,EAAMV,QAAU,O,EAGrDa,YAAc,WACZ,EAAKF,UAAS,SAAAD,GAAK,MAAK,CAAET,IAAKS,EAAMT,IAAM,O,uDAGnC,IAAD,EACwBV,KAAKmB,MAA5BX,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACvB,OACE,kBAACa,EAAA,EAAD,KACE,kBAAC,EAAD,MACA,6BACE,kBAAC,EAAD,CAAYrB,OAAQF,KAAKY,eACzB,kBAAC,EAAD,CAAeR,UAAWJ,KAAKqB,kBAC/B,kBAAC,EAAD,CAAWf,MAAON,KAAKsB,eAExBd,EAAO,GAAKC,EAAU,GAAKC,EAAM,EAChC,6BACE,kBAAC,EAAD,CAAWF,KAAMA,EAAMC,QAASA,EAASC,IAAKA,IAC9C,kBAAC,EAAD,CAAcF,KAAMA,EAAMC,QAASA,EAASC,IAAKA,KAGnD,kBAAC,EAAD,CAAcO,QAAQ,qG,GAnCdvB,IAAMC,WCIJ6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMxB,c","file":"static/js/main.c4897c13.chunk.js","sourcesContent":["import React from 'react';\r\nimport MaterialButton from '@material-ui/core/Button';\r\n\r\nexport class Title extends React.Component {\r\n  render() {\r\n    return <h1>Будь-ласка залиште Ваш відгук</h1>;\r\n  }\r\n}\r\n\r\nexport class ButtonGood extends React.Component {\r\n  render() {\r\n    return (\r\n      <MaterialButton variant=\"contained\" color=\"primary\" onClick={this.props.onGood}>\r\n        Добре\r\n      </MaterialButton>\r\n    );\r\n  }\r\n}\r\n\r\nexport class ButtonNeutral extends React.Component {\r\n  render() {\r\n    return (\r\n      <MaterialButton variant=\"contained\" onClick={this.props.onNeutral}>\r\n        Нейтрально\r\n      </MaterialButton>\r\n    );\r\n  }\r\n}\r\n\r\nexport class ButtonBad extends React.Component {\r\n  render() {\r\n    return (\r\n      <MaterialButton variant=\"contained\" color=\"secondary\" onClick={this.props.onBad}>\r\n        Погано\r\n      </MaterialButton>\r\n    );\r\n  }\r\n}\r\n","import React, { Fragment } from 'react';\r\n\r\nexport class Statistic extends React.Component {\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <h2>Статистика</h2>\r\n        <h3>Добре: {this.props.good}</h3>\r\n        <h3>Нейтрально: {this.props.neutral}</h3>\r\n        <h3>Погано: {this.props.bad}</h3>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n","import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class TotalCounter extends React.Component {\r\n  render() {\r\n    let goodFeedback = Math.round(this.props.good / (this.props.good + this.props.bad) / 0.01);\r\n    return (\r\n      <Fragment>\r\n        <h3>\r\n          Загальна кількість відгуків: {this.props.good + this.props.neutral + this.props.bad}\r\n        </h3>\r\n        <h3>Статистика позитивних відгуків: {goodFeedback} %</h3>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nTotalCounter.defaultProps = {\r\n  goodFeedback: 0,\r\n};\r\n\r\nTotalCounter.propTypes = {\r\n  goodFeedback: PropTypes.number.isRequired,\r\n};\r\n","import React from 'react';\r\n\r\nexport class Notification extends React.Component {\r\n  render() {\r\n    return <h3>{this.props.message}</h3>;\r\n  }\r\n}\r\n","import React from 'react';\nimport { Title, ButtonGood, ButtonNeutral, ButtonBad } from './components/Button.js';\nimport { Statistic } from './components/Statistic.js';\nimport { TotalCounter } from './components/Total.js';\nimport { Notification } from './components/Notification.js';\nimport Container from '@material-ui/core/Container';\nimport PropTypes from 'prop-types';\n\nclass App extends React.Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  goodFeedback = () => {\n    this.setState(state => ({ good: state.good + 1 }));\n  };\n\n  neutralFeedback = () => {\n    this.setState(state => ({ neutral: state.neutral + 1 }));\n  };\n\n  badFeedback = () => {\n    this.setState(state => ({ bad: state.bad + 1 }));\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <Container>\n        <Title />\n        <div>\n          <ButtonGood onGood={this.goodFeedback} />\n          <ButtonNeutral onNeutral={this.neutralFeedback} />\n          <ButtonBad onBad={this.badFeedback} />\n        </div>\n        {good > 0 || neutral > 0 || bad > 0 ? (\n          <div>\n            <Statistic good={good} neutral={neutral} bad={bad} />\n            <TotalCounter good={good} neutral={neutral} bad={bad} />\n          </div>\n        ) : (\n          <Notification message=\"Відгуки відсутні\" />\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n\nApp.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  message: PropTypes.string,\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}